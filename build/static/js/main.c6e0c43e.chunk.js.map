{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/Home.js","components/FetchData.js","components/AddItem.js","components/EditableTable.js","components/Counter.js","App.js","registerServiceWorker.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","children","Home","href","FetchData","forecasts","loading","populateWeatherData","contents","renderForecastsTable","id","a","fetch","response","json","data","aria-labelledby","map","forecast","key","date","temperatureC","temperatureF","summary","AddItem","renterItems","newItemName","newItemValue","newItemCategory","newRenterName","populateInsuranceData","actOnData","category","itemName","itemValue","renterName","then","reloadData","renderItemsTable","inputMarginStyle","margin","htmlFor","type","value","style","onChange","e","target","min","max","step","addItem","method","url","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","React","Styles","styled","div","defaultColumn","Cell","cellObj","initialValue","index","row","column","updateMyData","deleteOneObject","useState","setValue","useEffect","columnHeader","Header","includes","onBlur","original","_id","Table","columns","skipPageReset","useTable","autoResetPage","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","pageIndex","pageSize","headerGroup","getHeaderGroupProps","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","disabled","length","defaultValue","Number","width","formatData","item","EditableTable","useMemo","accessor","setData","setSkipPageReset","loadInsuranceData","newData","rowIndex","columnId","objectId","modifiedObj","find","obj","idPara","Counter","currentCount","incrementCounter","aria-live","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","basename","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c6e0c43e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n  static displayName = NavMenu.name;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar () {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header>\r\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n          <Container>\r\n            <NavbarBrand tag={Link} to=\"/\">Renter Insurance Application</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n              <ul className=\"navbar-nav flex-grow\">\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink tag={Link} className=\"text-dark\" to=\"/insurance\">Insurance application</NavLink>\r\n                </NavItem>\r\n              </ul>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class Home extends Component {\r\n  static displayName = Home.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1>Renter Insurance Application</h1>\r\n        <p>A single-page application hosts by Azure cloud, built with:</p>\r\n        <ul>\r\n          <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n          <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\r\n          <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n        </ul>\r\n        <p>To help you get started, we have also set up:</p>\r\n        <ul>\r\n          <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n          <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n          <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\r\n        </ul>\r\n        <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport class FetchData extends Component {\r\n  static displayName = FetchData.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { forecasts: [], loading: true };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateWeatherData();\r\n  }\r\n\r\n  static renderForecastsTable(forecasts) {\r\n    return (\r\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Temp. (C)</th>\r\n            <th>Temp. (F)</th>\r\n            <th>Summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {forecasts.map(forecast =>\r\n            <tr key={forecast.date}>\r\n              <td>{forecast.date}</td>\r\n              <td>{forecast.temperatureC}</td>\r\n              <td>{forecast.temperatureF}</td>\r\n              <td>{forecast.summary}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let contents = this.state.loading\r\n      ? <p><em>Loading...</em></p>\r\n      : FetchData.renderForecastsTable(this.state.forecasts);\r\n\r\n    return (\r\n      <div>\r\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n        <p>This component demonstrates fetching data from the server.</p>\r\n        {contents}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async populateWeatherData() {\r\n    const response = await fetch('weatherforecast');\r\n    const data = await response.json();\r\n    this.setState({ forecasts: data, loading: false });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class AddItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      renterItems: [],\r\n      newItemName: \"\",\r\n      newItemValue: 100,\r\n      newItemCategory: '',\r\n      newRenterName: \"\",\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.populateInsuranceData();\r\n  }\r\n\r\n  addItem() {\r\n    this.actOnData(\"POST\", \"insurance/\", {\r\n      category: this.state.newItemCategory,\r\n      itemName: this.state.newItemName,\r\n      itemValue: this.state.newItemValue,\r\n      renterName: this.state.newRenterName,\r\n    }).then((data) => {\r\n      //console.log(data); // JSON data parsed by `data.json()` call\r\n      this.props.reloadData(data);\r\n      this.setState({ renterItems: data });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let contents = this.state.loading ? (\r\n      <p>\r\n        <em>Loading...</em>\r\n      </p>\r\n    ) : (\r\n      this.renderItemsTable(this.state.renterItems)\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <h1 id=\"tabelLabel\">Insured Personal Items</h1>\r\n        {contents}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderItemsTable(renterItems) {\r\n    let inputMarginStyle = { margin: \"5px\" };\r\n\r\n    return (\r\n      <div>\r\n        {\" \"}\r\n        <label htmlFor=\"newRenterName\">Renter Name </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"newRenterName\"\r\n          value={this.state.newRenterName}\r\n          style= {inputMarginStyle}\r\n          onChange={(e) => this.setState({ newRenterName: e.target.value })}\r\n        ></input>\r\n        <label htmlFor=\"newItemCategory\">Item Category </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"newItemCategory\"\r\n          value={this.state.newItemCategory}\r\n          style= {inputMarginStyle}\r\n          onChange={(e) => this.setState({ newItemCategory: e.target.value })}\r\n        ></input>\r\n        <label htmlFor=\"newItemName\">Item Name </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"newItemName\"\r\n          value={this.state.newItemName}\r\n          style= {inputMarginStyle}\r\n          onChange={(e) => this.setState({ newItemName: e.target.value })}\r\n        ></input>\r\n        <label htmlFor=\"newItemValue\">Item Value </label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"newItemValue\"\r\n          min=\"100\"\r\n          max=\"5000\"\r\n          step=\"50\"\r\n          style= {inputMarginStyle}\r\n          value={this.state.newItemValue}\r\n          onChange={(e) => this.setState({ newItemValue: e.target.value })}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"Add new Item\"\r\n          onClick={(e) => this.addItem()}\r\n        ></input>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async populateInsuranceData() {\r\n    const response = await fetch(\"insurance\");\r\n    const data = await response.json();\r\n    this.setState({ renterItems: data, loading: false });\r\n  }\r\n\r\n  async actOnData(method = \"POST\", url = \"\", data = {}) {\r\n    // Default options are marked with *\r\n    const response = await fetch(url, {\r\n      method: method, // POST, GET, POST, PUT, DELETE, etc.\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: \"same-origin\", // include, *same-origin, omit\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      redirect: \"follow\", // manual, *follow, error\r\n      referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n    });\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useTable, usePagination } from \"react-table\";\r\nimport AddItem from \"./AddItem\";\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n\r\n      input {\r\n        font-size: 1rem;\r\n        padding: 0;\r\n        margin: 0;\r\n        border: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pagination {\r\n    padding: 0.5rem;\r\n  }\r\n`;\r\n\r\n// Create an editable cell renderer\r\nconst EditableCell = (cellObj) => {\r\n  // We need to keep and update the state of the cell normally\r\n  const {\r\n    value: initialValue,\r\n    row: index,\r\n    column: id,\r\n    updateMyData, // This is a custom function that we supplied to our table instance\r\n    deleteOneObject,\r\n  } = cellObj;\r\n\r\n  const [value, setValue] = React.useState(initialValue);\r\n\r\n  const onChange = (e) => setValue(e.target.value);\r\n\r\n  // We'll only update the external data when the input is blurred\r\n  const onBlur = () => {\r\n    updateMyData(index, id, value, cellObj.row.original._id);\r\n  };\r\n\r\n  // If the initialValue is changed external, sync it up with our state\r\n  React.useEffect(() => {\r\n    setValue(initialValue);\r\n  }, [initialValue]);\r\n\r\n  let columnHeader = cellObj.column.Header;\r\n  if (columnHeader !== \"Delete\") {\r\n    let notSupported = [\"Category\"];\r\n    if (notSupported.includes(columnHeader)) {\r\n      return <div>{value}</div>;\r\n    } else {\r\n      return <input value={value} onChange={onChange} onBlur={onBlur} />;\r\n    }\r\n  } else\r\n    return (\r\n      <input\r\n        type=\"button\"\r\n        value=\"delete\"\r\n        onClick={() => {\r\n          deleteOneObject(cellObj.row.original._id);\r\n        }}\r\n      ></input>\r\n    );\r\n};\r\n\r\n// Set our editable cell renderer as the default Cell renderer\r\nconst defaultColumn = {\r\n  Cell: EditableCell,\r\n};\r\n\r\n// Be sure to pass our updateMyData and the skipPageReset option\r\nfunction Table({\r\n  columns,\r\n  data,\r\n  updateMyData,\r\n  skipPageReset,\r\n  deleteOneObject,\r\n}) {\r\n  // For this example, we're using pagination to illustrate how to stop\r\n  // the current page from resetting when our data changes\r\n  // Otherwise, nothing is different here.\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n      // use the skipPageReset option to disable page resetting temporarily\r\n      autoResetPage: !skipPageReset,\r\n      // updateMyData isn't part of the API, but\r\n      // anything we put into these options will\r\n      // automatically be available on the instance.\r\n      // That way we can call this function from our\r\n      // cell renderer!\r\n      updateMyData,\r\n      deleteOneObject,\r\n    },\r\n    usePagination\r\n  );\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {\"<<\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {\"<\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {\">\"}\r\n        </button>{\" \"}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {\">>\"}\r\n        </button>{\" \"}\r\n        <span>\r\n          Page{\" \"}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{\" \"}\r\n        </span>\r\n        <span>\r\n          | Go to page:{\" \"}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={(e) => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n              gotoPage(page);\r\n            }}\r\n            style={{ width: \"100px\" }}\r\n          />\r\n        </span>{\" \"}\r\n        <select\r\n          value={pageSize}\r\n          onChange={(e) => {\r\n            setPageSize(Number(e.target.value));\r\n          }}\r\n        >\r\n          {[5, 10, 20, 30, 40, 50].map((pageSize) => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction EditableTable() {\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Renter Name\",\r\n        accessor: \"renterName\",\r\n      },\r\n      {\r\n        Header: \"Category\",\r\n        accessor: \"category\",\r\n      },\r\n      {\r\n        Header: \"Item Name\",\r\n        accessor: \"itemName\",\r\n      },\r\n      {\r\n        Header: \"Item Value\",\r\n        accessor: \"itemValue\",\r\n      },\r\n      {\r\n        Header: \"Delete\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n  // const makeData = (num) => {\r\n  //   return [\r\n  //     { id: 1, name: \"Harry Potter\", age: 20 },\r\n  //     { id: 2, name: \"Hermione Granger\", age: 20 },\r\n  //     { id: 3, name: \"Ron Weasley\", age: 20 },\r\n  //     { id: 4, name: \"You know who\", age: 150 },\r\n  //     { id: 5, name: \"Professor Dumbledore\", age: 170 },\r\n  //     { id: 6, name: \"Professor Snape\", age: 60 },\r\n  //     { id: 7, name: \"Rubeus Hagrid\", age: 50 },\r\n  //   ];\r\n  // };\r\n\r\n  const [data, setData] = React.useState([]);\r\n  const [skipPageReset, setSkipPageReset] = React.useState(false);\r\n\r\n  // We need to keep the table from resetting the pageIndex when we\r\n  // Update data. So we can keep track of that flag with a ref.\r\n\r\n  // When our cell renderer calls updateMyData, we'll use\r\n  // the rowIndex, columnId and new value to update the\r\n  // original data\r\n  const updateMyData = (rowIndex, columnId, value, objectId) => {\r\n    // We also turn on the flag to not reset the page\r\n    setSkipPageReset(true);\r\n\r\n    let modifiedObj = data.find((obj) => obj._id === objectId);\r\n    if (!modifiedObj || !columnId || !columnId.id || !modifiedObj[columnId.id])\r\n      return;\r\n    if (modifiedObj[columnId.id] === value) return;\r\n\r\n    modifiedObj[columnId.id] = value;\r\n    actOnData(\"POST\", \"insurance/\", modifiedObj).then((data) => {\r\n      //console.log(data); // JSON data parsed by `data.json()` call\r\n      setData(formatData(data));\r\n    });\r\n  };\r\n\r\n  const deleteOneObject = (idPara) => {\r\n    setSkipPageReset(true);\r\n    actOnData(\"DELETE\", `insurance/item/${idPara}`).then((data) => {\r\n      //console.log(data); // JSON data parsed by `data.json()` call\r\n      setData(formatData(data));\r\n    });    \r\n  };\r\n\r\n  // After data chagnes, we turn the flag back off\r\n  // so that if data actually changes when we're not\r\n  // editing it, the page is reset\r\n  React.useEffect(() => {\r\n    setSkipPageReset(false);\r\n  }, [data]);\r\n\r\n  // load data from web\r\n  React.useEffect(() => {\r\n    async function loadInsuranceData() {\r\n      const response = await fetch(\"insurance\");\r\n      const data = await response.json();\r\n      setData(formatData(data));\r\n    }\r\n    loadInsuranceData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <AddItem reloadData={newData => setData(formatData(newData))} />\r\n      <br />\r\n      <h4>Hint: click table cell to edit its value</h4>\r\n      <Styles>\r\n        <Table\r\n          columns={columns}\r\n          data={data}\r\n          updateMyData={updateMyData}\r\n          deleteOneObject={deleteOneObject}\r\n          skipPageReset={skipPageReset}\r\n        />\r\n      </Styles>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction formatData(data) {\r\n  return data.map((item) => {\r\n    let obj = {\r\n      _id: item._id,\r\n      renterName: item.renterName,\r\n      itemName: item.itemName,\r\n      itemValue: item.itemValue,\r\n      category: item.category,\r\n    };\r\n\r\n    return obj;\r\n  });\r\n}\r\n\r\nasync function actOnData(method = \"POST\", url = \"\", data = {}) {\r\n  // Default options are marked with *\r\n  const response = await fetch(url, {\r\n    method: method, // POST, GET, POST, PUT, DELETE, etc.\r\n    mode: \"cors\", // no-cors, *cors, same-origin\r\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n    credentials: \"same-origin\", // include, *same-origin, omit\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    redirect: \"follow\", // manual, *follow, error\r\n    referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n  });\r\n  return response.json(); // parses JSON response into native JavaScript objects\r\n}\r\n\r\nexport default EditableTable;\r\n","import React, { Component } from 'react';\r\n\r\nexport class Counter extends Component {\r\n  static displayName = Counter.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { currentCount: 0 };\r\n    this.incrementCounter = this.incrementCounter.bind(this);\r\n  }\r\n\r\n  incrementCounter() {\r\n    this.setState({\r\n      currentCount: this.state.currentCount + 1\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Counter</h1>\r\n\r\n        <p>This is a simple example of a React component.</p>\r\n\r\n        <p aria-live=\"polite\">Current count: <strong>{this.state.currentCount}</strong></p>\r\n\r\n        <button className=\"btn btn-primary\" onClick={this.incrementCounter}>Increment</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home';\r\nimport { FetchData } from './components/FetchData';\r\nimport EditableTable from './components/EditableTable'\r\nimport { Counter } from './components/Counter';\r\n\r\nimport './custom.css'\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n\r\n  render () {\r\n    return (\r\n      <Layout>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/counter' component={Counter} />\r\n        <Route path='/fetch-data' component={FetchData} />\r\n        <Route path='/insurance' component={EditableTable} />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}